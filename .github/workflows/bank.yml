name: Bank_App_CICD

on:
  push:
    branches: [ "main" ] #triger when there is a push onto main

jobs:
  compile:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4 #create a local copy
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn compile

    
  security_check:
    runs-on: self-hosted
    needs: compile #run only after completion compile job

    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run:  |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install trivy -y
    - name: Trivy FS Scan
      run: trivy fs --format table -o fs-report.json .

    - name: Gitleaks scan
      run: sudo apt install gitleaks -y 

    - name: Gitleaks Scan
      run: gitleaks detect source . gitleaks-report.json -f json
      
  test:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Unit Test Case
      run: mvn test 

  build_sonar_scan:
    runs-on: self-hosted
    needs: test #run only after completion security_check job

    steps:
    - uses: actions/checkout@v4
    - name: set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build Project
      run: mvn package
    - name: Ulpoad artifact
      uses: actions/upload-artifact@v4
      with: 
        name: app-jar
        path: target/*.jar  

    - uses: actions/checkout@v4 
      with:
        fetch-depth: 0
    - name: Sonarqube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0 
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeSec: 600

      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  build_docker_image_and_push:
    runs-on: self-hosted
    needs: build_sonar_scan

    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target 

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push
      uses: docker/build-push-action@v6
      with: 
        context: .
        push: true
        tags: castromeka/bankapp:latest
      
      
  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: build_docker_image_and_push
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{  secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG}}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: |
        kubectl apply -f ds.yml     
